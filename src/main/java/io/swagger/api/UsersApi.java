/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.DTO.*;
import io.swagger.model.ResponseDTO.InlineResponse200;
import io.swagger.model.ResponseDTO.UserResponseDTO;
import io.swagger.model.UsersLoginBody;
import io.swagger.model.exception.AccountNotFoundException;
import io.swagger.model.exception.UserNotFoundException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Min;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-05-17T11:45:05.257Z[GMT]")
@Validated
@CrossOrigin(origins = "*", allowedHeaders = "*")
public interface UsersApi {

    @Operation(summary = "Creating a new user", description = "", tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "User has been created.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponseDTO.class)))),
            @ApiResponse(responseCode = "422", description = "Fields are missing!"),
            @ApiResponse(responseCode = "406", description = "Input doesnt meet requirements!"),
    })
    @RequestMapping(value = "/users/signup",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<UserResponseDTO> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new user with this endpoint", required = true, schema = @Schema()) @Valid @RequestBody UserCreateDTO body);


    @Operation(summary = "Get all users", description = "This endpoint will provide all available users", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "All users", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserResponseDTO.class)))),

            @ApiResponse(responseCode = "401", description = "Not authorized for this endpoint")})
    @RequestMapping(value = "/users",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<List<UserResponseDTO>> getAllUsers(@Parameter(in = ParameterIn.QUERY, description = "", schema = @Schema()) @Valid @RequestParam(value = "offset", required = false) Integer offset, @Parameter(in = ParameterIn.QUERY, description = "", schema = @Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit, @Parameter(in = ParameterIn.QUERY, description = "", schema = @Schema()) @Valid @RequestParam(value = "firstname", required = false) String firstname, @Parameter(in = ParameterIn.QUERY, description = "", schema = @Schema()) @Valid @RequestParam(value = "lastname", required = false) String lastname, @Parameter(in = ParameterIn.QUERY, description = "", schema = @Schema()) @Valid @RequestParam(value = "activated", required = false) Boolean activated, @Parameter(in = ParameterIn.QUERY, description = "", schema = @Schema()) @Valid @RequestParam(value = "hasaccount", required = false) Boolean hasAccount) throws AccountNotFoundException;


    @Operation(summary = "Get one specific user", description = "Get one user with the given id as parameter", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "One user", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))),

            @ApiResponse(responseCode = "404", description = "No user found with provided userid!"),

            @ApiResponse(responseCode = "401", description = "Not allowed to get user!")})
    @RequestMapping(value = "/users/{userid}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<UserResponseDTO> getOneUser(@Min(1) @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema(allowableValues = {}, minimum = "1"
    )) @PathVariable("userid") Integer userid) throws UserNotFoundException;


    @Operation(summary = "Change password of specific user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Password successfully changed!"),

            @ApiResponse(responseCode = "401", description = "Not the authority to change password for user"),

            @ApiResponse(responseCode = "404", description = "No user found with provided userid!"),
            @ApiResponse(responseCode = "406", description = "Input doesnt meet requirements!")})
    @RequestMapping(value = "/users/{userid}/password",
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> setUserPassword(@Min(1) @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema(allowableValues = {}, minimum = "1"
    )) @PathVariable("userid") Integer userid, @Parameter(in = ParameterIn.DEFAULT, description = "Change the password of a existing user with this endpoint", required = true, schema = @Schema()) @Valid @RequestBody UserPasswordDTO body) throws UserNotFoundException;


    @Operation(summary = "Change role of specific user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Role successfully changed!"),

            @ApiResponse(responseCode = "401", description = "Not authorized for this endpoint"),
            @ApiResponse(responseCode = "422", description = "No role provided for user!"),

            @ApiResponse(responseCode = "404", description = "No user found with provided userid!")})
    @RequestMapping(value = "/users/{userid}/role",
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> setUserRole(@Min(1) @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema(allowableValues = {}, minimum = "1"
    )) @PathVariable("userid") Integer userid, @Parameter(in = ParameterIn.DEFAULT, description = "Change the role of a existing user with this endpoint", required = true, schema = @Schema()) @Valid @RequestBody UserRoleDTO body) throws UserNotFoundException;


    @Operation(summary = "Change activation status of specific user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Activation successfully changed!"),

            @ApiResponse(responseCode = "401", description = "Not authorized for this endpoint"),

            @ApiResponse(responseCode = "404", description = "No user found with provided userid!")})
    @RequestMapping(value = "/users/{userid}/activation",
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<Void> setUserStatus(@Min(1) @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema(allowableValues = {}, minimum = "1"
    )) @PathVariable("userid") Integer userid, @Parameter(in = ParameterIn.DEFAULT, description = "Change the activation of a existing user with this endpoint", required = true, schema = @Schema()) @Valid @RequestBody UserActivationDTO body) throws UserNotFoundException;


    @Operation(summary = "Update a specific user", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "User has been updated!"),
            @ApiResponse(responseCode = "422", description = "Fields are missing!"),
            @ApiResponse(responseCode = "406", description = "Email already has been used!"),
            @ApiResponse(responseCode = "401", description = "Not the authority to update userdetails for requested user"),
            @ApiResponse(responseCode = "404", description = "No user found with provided userid!")})
    @RequestMapping(value = "/users/{userid}",
            consumes = {"application/json"},
            method = RequestMethod.PUT)
    ResponseEntity<InlineResponse200> updateUser(@Min(1) @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema(allowableValues = {}, minimum = "1"
    )) @PathVariable("userid") Integer userid, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existing user with this endpoint", required = true, schema = @Schema()) @Valid @RequestBody UserDTO body) throws UserNotFoundException;


    @Operation(summary = "Authenticate user", description = "This call returns a JWT token.", tags = {"Authorization"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Authentication OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),

            @ApiResponse(responseCode = "401", description = "Invalid user credentials")})
    @RequestMapping(value = "/users/login",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<InlineResponse200> usersLoginPost(@Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody UsersLoginBody body);

    @Operation(summary = "get current user", description = "This call returns current logged in user.", security = {
            @SecurityRequirement(name = "bearerAuth")}, tags = {"Users"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Authentication OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponseDTO.class))),

            @ApiResponse(responseCode = "403", description = "Not authorized for this endpoint")})
    @RequestMapping(value = "/users/current",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<UserResponseDTO> usersCurrentGet();

}

